This is preliminary documentation for an early version of a script to recognize 16S RNA sequences.
Authors: Alejandro Schaffer and Eric Nawrocki

github: https://github.com/aaschaffer/16S_sensor.git
Version: 0.07
------------------

Current Location of files:
/panfs/pan1/dnaorg/ssudetection/code/16S_sensor
or
https://github.com/aaschaffer/16S_sensor

##############################################################################
SETTING UP ENVIRONMENT VARIABLES

Before you can run 16S_sensor_script you will need to update some of your
command line variables. To do this, add the following three lines to
your .bashrc file (if you use bash shell) or .cshrc file (if you use C
shell or tcsh). The .bashrc or .cshrc file will be in your home
directory. To determine what shell you use type 'echo $SHELL', if it
returns '/bin/bash', then update your .bashrc file, if it returns
'/bin/csh' or '/bin/tcsh' then update your .cshrc file.

The 3 lines to add to your .bashrc file:
-----------
export SENSORDIR="/panfs/pan1/dnaorg/ssudetection/code/16S_sensor"
export PATH="$SENSORDIR:$PATH";
export BLASTDB="$SENSORDIR:$BLASTDB";
-----------

The 3 lines to add to your .cshrc file:
-----------
setenv SENSORDIR "/panfs/pan1/dnaorg/ssudetection/code/16S_sensor"
setenv PATH "$SENSORDIR":"$PATH"
setenv BLASTDB "$SENSORDIR":"$BLASTDB"
-----------

Then, after adding those 3 lines, execute this command:
source ~/.bashrc
OR
source ~/.cshrc

To check that your environment variables are properly set up do the
following three commands:
echo $SENSORDIR
echo $PATH
echo $BLASTDB

The first command should return only:
/panfs/pan1/dnaorg/ssudetection/code/16S_sensor

The second echo commands should return a potentially longer
string that begins with the same path:
/panfs/pan1/dnaorg/ssudetection/code/16S_sensor

And the third echo command should return a potentially larger string
that includes (but not necessarily begins with) the same path: 
/panfs/pan1/dnaorg/ssudetection/code/16S_sensor

If that is not the case, please email Eric Nawrocki
(nawrocke@ncbi.nlm.nih.gov). If you do see the expected output, the
following sample run should work.

##############################################################################

Sample run:
Execute the following command:

16S_sensor_script 400 2500 $SENSORDIR/test_data/r.100.ssu.16S.fa class.txt 80 1e-40 1 sensor-out

You should see this output:
Final output saved as sensor-out/class.txt [16S_sensor v0.07]


The first argument is a lower bound on length.
The second argument is an upper bound on length.
The third argument is a set of input queries in FASTA format; it is assumed that
the first token after the > on the defline identifies the query and that
all query identifiers in the file are distinct.
The fourth argument is the output file.
The fifth argument is a lower bound on the identity percentage.
The sixth argument is an upper bound of the E-value
The seventh argument is the number of threads to use in running blastn.
The eigth argument is the name of a directory to store output files.

The two bounds on the right are applied in a logical AND fashion, so we look for
matches that are above the identity percentage threshold and below the E-value threshold
The bounds 80 and 1e-40 worked well on several tests.
In contrast, we did not find a general setting of the
length lower and upper bounds that works well on all tests. This
is because different experiments to collect 16S sequences use
different primer pairs that naturally lead to different expected lengths.
The bounds shown of 400 and 2500 worked well on a heterogeneous (not from a single
laboratory) set of 16S sequences from GenBank's nr database. In the context
of submissions, however, one would typically expect that
a) the lengths are homogeneous
and
b) the submitter should be able to specify what range of lengths is expected.
Therefore, when this software is used in the context of submissions, we recommend
to set the length parameters based on advice from the submitter, rather than by guessing
or by having a default setting.

Files needed:
This file:
README

BLAST database:
centroids90.nhr
centroids90.nin
centroids90.nsq

Programs used by the script:
sensor_classification3.pl
sensor_partition_by_length2.pl

Sample input
nucl_queries.fsa

The current script:
16S_sensor_script

The output has one row per query.
Column 1 is the query identifier.
Column 2 is the classification.
Column 3 is the strand of the sequence relative to the strand of the matching database 16S sequence, or NA if there is no match.
Column 4 is the number of local alignments between the sequence and the best matching database 16S sequence, or NA if there is no match.
Column 5 is the query coverage percentage of the best alignment between sequence and the best matching database 16S sequence, or NA if there is no match.

All queries shorter than lower length threshold are classified as too short, although using the example lower
threshold of 400, they could be partial 16S RNA sequences.

All queries longer than the upper length threshold are classified as too long, although in reality they
could be genomic sequences that include a 16S RNA sequence somewhere inside.

All sequences with length between the two thresholds are classified as one of:
yes
no
imperfect_match

"imperfect_match" means that there is match to the 16S database but either its identity
percentage is below threshold or its E-value is above threshold (for the best match), while
"no" means that there is not a significant match at all. 

In column 3, plus means same strand and minus means opposite strand, and mixed means at least one
             one alignment on each strand

In column 4, values > 1 might be evidence of a missassembly or gap in the query sequence.

If column 2 has the value no, then the values in column 3 and column 4 will appear as NA (short, for not applicable).

--------------
The blastn command used by 16S_sensor can be found in the 16S_sensor_script file.

--------------
Last updated: EPN, Wed May 24 15:08:36 2017
